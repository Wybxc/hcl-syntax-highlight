#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = hcl
file_extensions []     = hcl;

__NAME \= [a-zA-Z][0-9a-zA-Z]*(?:_[0-9a-zA-Z]+)*

################################################################
## Styles
################################################################

styles [] {

.comment : style {
   color                 = light_green
   italic                = true
   textmate_scope        = comment
}

.keyword : style {
   color                 = blue
   textmate_scope        = keyword
}

.variable     : style {
   color                = yellow
   textmate_scope       = variable
}

.const     : style {
   color                = green
   textmate_scope       = entity.name.class
}

.numeric : style {
   color                 = gold
   ace_scope             = constant.numeric
   textmate_scope        = constant.numeric
   pygments_scope        = Number
}

.quote : style {
   color                 = orange
   ace_scope             = string
   textmate_scope        = string
   pygments_scope        = String
}

.punct : style {
   color                 = red_2
   ace_scope             = punctuation
   textmate_scope        = punctuation
   pygments_scope        = Punctuation
}

.none : style {
   color                = white
}

}

#################################################
## Parse contexts
#################################################

contexts [] {

##############################################
## Main Context - Entry point context
##############################################

main : context {
   : push {
      regex \= (\b(wordsig|boolsig|quote)\b)
      styles[] = .keyword;
      context[] = sig;
   }
   : push {
      regex \= (\b(word|bool)\b)
      styles[] = .keyword;
      context[] = circ;
   }
   : include "comment";
}

sig : context {
   : eol_pop {}
   : pattern {
      regex \= ($${__NAME})
      styles[] = .const;
   }
   : include "comment";
   : include "quote";
}

circ : context {
   : pop {
      regex \= (;)
      styles[] = .punct;
   }
   : include "none";
   : pattern {
      regex \= (\bin\b)
      styles[] = .keyword;
   }
   : pattern {
      regex \= ($${__NAME})
      styles[] = .variable;
   }
   : pattern {
      regex \= (=)
      styles[] = .punct;
   }
   : include "value";
}

none: context {
   : pattern {
      regex \= (\s+)
      styles[] = .none;
   }
}

value: context {
   : include "none";
   : pattern {
      regex \= (:|&&|\|\||==)
      styles[] = .punct;
   }
   : pattern {
      regex \= (\bin\b)
      styles[] = .keyword;
   }
   : pattern {
      regex \= ($${__NAME})
      styles[] = .variable;
   }
   : inline_push {
      regex \= (\{)
      styles[] = .punct;
      : pop {
         regex \= (\})
         styles[] = .punct;
      }
      : pattern {
         regex \= ($${__NAME})
         styles[] = .const;
      }
      : pattern {
         regex \= (,)
         styles[] = .punct;
      }
      : include "numeric";
      : include "comment";
   }
   : inline_push {
      regex \= (\[)
      styles[] = .punct;
      : pop {
         regex \= (\])
         styles[] = .punct;
      }
      : include "none";
      : inline_push {
         regex \= ($${__NAME})
         styles[] = .variable;
         : pop {
            regex \= (;)
            styles[] = .punct;
         }
         : include "value";
      }
      : inline_push {
         regex \= (\d+)
         styles[] = .numeric;
         : pop {
            regex \= (;)
            styles[] = .punct;
         }
         : include "value";
      }
      : include "value";
      : include "comment";
   }
   : include "numeric";
   : include "comment";
}

// select : context {
//    regex \= (
// }

comment : context {
   : pattern {
      regex          \= ((#.*)|(//.*))
      styles []       = .comment;
   }
   : include "multi_line_comment";
}

quote : context {
   : inline_push {
      regex          \= (')
      styles []    = .quote;
      : pop {
         regex       \= (')
         styles [] = .quote;
      }
      : pattern {
         regex       \= ([^']*)
         styles []    = .quote;
      }
   }
}


###########################################
## Numeric Context
###########################################

numeric : context {
   : pattern {
      regex          \= (0x[0-9a-fA-F]+)
      styles []       = .numeric;
   }
   : pattern {
      regex          \= (0b[01]+)
      styles []       = .numeric;
   }
   : pattern {
      regex          \= (\b\d+)
      styles []       = .numeric;
   }
   : pattern {
      regex          \= (\+|\*|-|/|(&)|(\|)|(\^)|(!)|(~))
      styles []       = .punct;
   }
}

###########################################
## Multi Line Comment Context
###########################################

multi_line_comment : context {
   description        = multiline
   : inline_push {
      regex          \= (/\*)
      default_style   = .comment
      styles []       = .comment;
      : pop {
         regex       \= (\*/)
         styles []    = .comment;
      }
   }
}
   
}